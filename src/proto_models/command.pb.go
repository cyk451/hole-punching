// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: command.proto

package proto_models

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CmdCode int32

const (
	CmdCode_AddUser    CmdCode = 0
	CmdCode_RemoveUser CmdCode = 1
	CmdCode_Disconnect CmdCode = 2
)

var CmdCode_name = map[int32]string{
	0: "AddUser",
	1: "RemoveUser",
	2: "Disconnect",
}

var CmdCode_value = map[string]int32{
	"AddUser":    0,
	"RemoveUser": 1,
	"Disconnect": 2,
}

func (x CmdCode) String() string {
	return proto.EnumName(CmdCode_name, int32(x))
}

func (CmdCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}

type Commands struct {
	Code   CmdCode   `protobuf:"varint,1,opt,name=code,proto3,enum=proto_models.CmdCode" json:"code,omitempty"`
	Client []*Client `protobuf:"bytes,2,rep,name=client,proto3" json:"client,omitempty"`
}

func (m *Commands) Reset()         { *m = Commands{} }
func (m *Commands) String() string { return proto.CompactTextString(m) }
func (*Commands) ProtoMessage()    {}
func (*Commands) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}
func (m *Commands) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commands) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commands.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commands) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commands.Merge(m, src)
}
func (m *Commands) XXX_Size() int {
	return m.Size()
}
func (m *Commands) XXX_DiscardUnknown() {
	xxx_messageInfo_Commands.DiscardUnknown(m)
}

var xxx_messageInfo_Commands proto.InternalMessageInfo

func (m *Commands) GetCode() CmdCode {
	if m != nil {
		return m.Code
	}
	return CmdCode_AddUser
}

func (m *Commands) GetClient() []*Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto_models.CmdCode", CmdCode_name, CmdCode_value)
	proto.RegisterType((*Commands)(nil), "proto_models.Commands")
}

func init() { proto.RegisterFile("command.proto", fileDescriptor_213c0bb044472049) }

var fileDescriptor_213c0bb044472049 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0xcd,
	0x4d, 0xcc, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x01, 0x53, 0xf1, 0xb9, 0xf9,
	0x29, 0xa9, 0x39, 0xc5, 0x52, 0x3c, 0xc9, 0x39, 0x99, 0xa9, 0x79, 0x25, 0x10, 0x39, 0xa5, 0x64,
	0x2e, 0x0e, 0x67, 0x88, 0xe2, 0x62, 0x21, 0x4d, 0x2e, 0x96, 0xe4, 0xfc, 0x94, 0x54, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0x3e, 0x23, 0x51, 0x3d, 0x64, 0x6d, 0x7a, 0xce, 0xb9, 0x29, 0xce, 0xf9, 0x29,
	0xa9, 0x41, 0x60, 0x25, 0x42, 0x3a, 0x5c, 0x6c, 0x10, 0x63, 0x24, 0x98, 0x14, 0x98, 0x35, 0xb8,
	0x8d, 0x44, 0xd0, 0x14, 0x83, 0xe5, 0x82, 0xa0, 0x6a, 0xb4, 0xcc, 0xb8, 0xd8, 0xa1, 0xda, 0x85,
	0xb8, 0xb9, 0xd8, 0x1d, 0x53, 0x52, 0x42, 0x8b, 0x53, 0x8b, 0x04, 0x18, 0x84, 0xf8, 0xb8, 0xb8,
	0x82, 0x52, 0x73, 0xf3, 0xcb, 0x52, 0xc1, 0x7c, 0x46, 0x10, 0xdf, 0x25, 0xb3, 0x38, 0x39, 0x3f,
	0x2f, 0x2f, 0x35, 0xb9, 0x44, 0x80, 0xc9, 0x49, 0xe2, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f,
	0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xd6, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x79, 0x5a,
	0x82, 0xea, 0x00, 0x00, 0x00,
}

func (m *Commands) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commands) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommand(dAtA, i, uint64(m.Code))
	}
	if len(m.Client) > 0 {
		for _, msg := range m.Client {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCommand(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Commands) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommand(uint64(m.Code))
	}
	if len(m.Client) > 0 {
		for _, e := range m.Client {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	return n
}

func sovCommand(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Commands) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commands: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commands: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= CmdCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = append(m.Client, &Client{})
			if err := m.Client[len(m.Client)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCommand
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommand
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommand(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCommand
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommand = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand   = fmt.Errorf("proto: integer overflow")
)
